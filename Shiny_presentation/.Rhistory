plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~disp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
plot_ly(x = ~precip, type = "histogram")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
plot
_ly (
type = 'scattergeo' ,
lon =
c( 42, 39 ) ,
lat =
c( 12, 22 ) ,
text =
c( 'one' , 'two' ) ,
mode = 'markers' )
plot_ly (
type = 'scattergeo' ,
lon =
c( 42, 39 ) ,
lat =
c( 12, 22 ) ,
text =
c( 'one' , 'two' ) ,
mode = 'markers' )
plot_ly (
type = 'scattergeo' ,
lat =
c( 42, 39 ) ,
lon =
c( 12, 22 ) ,
text =
c( 'one' , 'two' ) ,
mode = 'markers' )
?volcano
?plot_ly
plot_ly (
type = 'scattergeo' ,
lat =
c( 38.909, 38.86 ) ,
lon =
c( -77.549, -77.04 ) ,
text =
c( 'one' , 'two' ) ,
mode = 'markers' )
plot_ly(type = 'heatmap', z=volcano)
shiny::runApp('C:/HY/Coursera/DS/9 Developing Data Products/Examples/Shiny Part I/Interactive_scatter')
runApp('C:/HY/Coursera/DS/9 Developing Data Products/Examples/Shiny Part II/Girth_interactive')
runApp('C:/HY/Coursera/DS/9 Developing Data Products/Week 2 Leaflet/Metrorail_stations_by_opening_time')
shiny::runApp('C:/HY/Coursera/DS/9 Developing Data Products/Examples/Shiny Part I/Second')
runApp('C:/HY/Coursera/DS/9 Developing Data Products/Examples/Shiny Part II/More_UI')
runApp('C:/HY/Projects/Washington_Metro_leaflet')
runApp('C:/HY/Coursera/DS/9 Developing Data Products/Examples/Shiny Part II/More_UI')
runApp('C:/HY/Projects/Washington_Metro_leaflet')
?tabPanel
runApp('C:/HY/Projects/Washington_Metro_leaflet')
library(data.table)
library(dplyr)
setwd("C:/HY/Projects/Washington_Metro_leaflet")
# Assumes query_wmata_stations.py has been run, outputting a .CSV file
prep<-function(fn)  {
stopifnot(grepl("\\.csv$", fn))
dfFullStation<-read.csv(fn, header=TRUE, stringsAsFactors = FALSE)
colTypes<-sapply(seq(ncol(dfFullStation)),
function(k) typeof(dfFullStation[,k]))
idxList<-which(colTypes=="list")
dfFullStation[,idxList]<-gsub("NULL",as.character(NA),
sapply(idxList, function(k)
unlist(as.character(dfFullStation[,k]))))
blankToNA<-function(s)  {
ifelse(s=="", as.character(NA), s)
}
dfFullStation<-dfFullStation %>%
mutate(LineCode2=blankToNA(LineCode2),
LineCode3=blankToNA(LineCode3),
StationTogether1=blankToNA(StationTogether1),
StationTogether2=blankToNA(StationTogether2))
dfRmDups<-dfFullStation %>%
as.data.table() %>%
setkey(Code) %>%
unique(by="Code") %>%
as.data.frame()
dfRmDups<-dfRmDups %>%
mutate(isUpperLevel=ifelse(is.na(StationTogether1),
-1,
ifelse(LineCode1=="RD",
TRUE,
ifelse(grepl("Enfant", Name) &
LineCode1 %in% c("GR", "YL"),
TRUE,
FALSE)
) %>% as.integer()
))
return(dfRmDups)
}
dfRmDups<-prep("api_stations.csv")
lookupCode<-function(df, stName, levelCode=-1)  {
stopifnot(levelCode %in% seq(-1,1))
dfPossible<-df %>%
filter(grepl(stName, Name))
bIncorrect<-(levelCode < 0 & any(dfPossible$isUpperLevel >= 0)) |
(levelCode >= 0 & any(dfPossible$isUpperLevel < 0))
stopifnot(!bIncorrect)
res<-df %>%
filter(isUpperLevel == levelCode & grepl(stName, Name)) %>%
select(Code) %>%
unlist()
stopifnot(length(res)==1)
return(res)
}
CODE_NOMA<-dfRmDups %>%
lookupCode("NoMa")
INFILL_STATIONS<-c(CODE_NOMA,
"C11") # Potomac Yard (BL & YL--future);
TERMINUS<-"TERMINUS"
# referenced from https://docs.google.com/spreadsheets/d/13Kz-v3Yjn6ork9vXyl8KLSgzf7KYuGNP9d7HPMd-Kzc/pub?hl=en&single=true&gid=0&output=html
linesByTravelOrder<-read.csv("api_lines_in_travel_order.csv", header=TRUE)
cName<-function(s)  {
s<-Filter(function(x) !is.na(x), s)
s<-gsub("(\\*|\\[[a-z]\\])", "", s)
s<-gsub("\\s*\\(.+\\)", "", s)
s<-gsub("[^A-z\\s\\']", " ", s)
s<-gsub("Mount", "Mt", s)
return(s)
}
cleanName<-Vectorize(cName, vectorize.args = "s")
eFirst<-function(s) {
words<-s %>%
cName() %>%
strsplit(" ") %>%
unlist()
return(words[1] %>% trimws())
}
extractFirst<-Vectorize(eFirst, vectorize.args = "s")
processOpenings<-function(fn) {
stopifnot(grepl("\\.csv$", fn))
openings<-read.csv(fn, header=T, stringsAsFactors=F)
openings<-openings %>%
mutate(Station = as.character(Station)) %>%
mutate(nameCleaned = cleanName(Station),
Opened=as.Date(Opened, format="%B %d, %Y"),
boolUpperLevel=ifelse(grepl("level\\s*\\)", Station),
grepl("[Uu]p", Station),
as.logical(NA)))
openings<-openings[order(openings$nameCleaned,
openings$boolUpperLevel),]
return(openings)
}
augmentStation<-function(dfOpenings, dfStations)  {
dfStations<-dfStations[order(dfStations$Name,
dfStations$isUpperLevel),]
namesApi<-extractFirst(dfStations$Name)
namesDL<-extractFirst(dfOpenings$Station)
sum(namesApi != namesDL)
res<-cbind(dfStations, dfOpenings)
cleanCols<-function(df) {
df<-df %>%
select(-c(Station, boolUpperLevel, nameCleaned))
idxNonNA<-apply(df, MARGIN=2, FUN = function(x) any(!is.na(x)))
df<-df %>%
select(names(df)[idxNonNA])
return(df)
}
res<-cleanCols(res)
res<-res[order(res$Code),]
res<-res %>%
select(-c(LineCode1, LineCode2, LineCode3, queriedLine))
return(res)
}
trimStations<-function(stationsWithOpenings)  {
dfMultiLevel<-stationsWithOpenings %>%
filter(isUpperLevel >= 0) %>%
arrange(Name, isUpperLevel)
splitMulti<-split(dfMultiLevel, dfMultiLevel$Name)
consolidateDF<-function(elt)  {
helper<-function(k) {
colName<-names(dfMultiLevel)[k]
if(colName %in% c("Lat", "Lon", "Name", "isUpperLevel",
"Lines", "Opened")) {
if(colName %in% c("Lat", "Lon"))
return(unique(elt[,k]))
else if(colName == "Name")  {
return(unique(elt$Name))
}
else if(colName == "isUpperLevel")
return(-1)
else if(colName == "Lines") {
res<-paste("Upper level: ", elt$Lines[2], "<br/>",
"Lower level: ", elt$Lines[1],
sep="")
return(res)
}
else
return(min(elt$Opened))
}
else
return(NA)
}
partialResults<-lapply(seq(ncol(dfMultiLevel)),
helper)
names(partialResults)<-names(dfMultiLevel)
return(partialResults %>% as.data.frame)
}
dfMultiLevel<-do.call(rbind,
lapply(splitMulti, consolidateDF))
dfSingleLevel<-stationsWithOpenings %>%
filter(isUpperLevel < 0)
res<-rbind(dfSingleLevel,
dfMultiLevel)
row.names(res)<-NULL
return(res)
}
augmentLines<-function(stationsWithOpenings, dfLines) {
res<-left_join(dfLines, stationsWithOpenings, by=c("StationCode"="Code"))
res<-res[order(res$LineCode,res$SeqNum),]
return(res)
}
openings<-processOpenings("Station opening time list.csv")
dfStations1<-augmentStation(openings, dfRmDups)
trimmedStations<-trimStations(dfStations1)
joinedLines<-augmentLines(dfStations1, linesByTravelOrder)
View(joinedLines)
View(openings)
openings %>% filter(grepl("Wiehle", nameCleaned))
WIEHLE_OPENING<-openings %>%
filter(grepl("Wiehle", nameCleaned)) %>%
select(Opened) %>%
unlist()
WIEHLE_OPENING<-openings %>%
filter(grepl("Wiehle", nameCleaned)) %>%
select(Opened) %>%
unlist() %>%
as.Date()
WIEHLE_OPENING<-openings %>%
filter(grepl("Wiehle", nameCleaned)) %>%
select(Opened) %>%
unlist() %>%
as.Date(origin=int)
WIEHLE_OPENING<-openings %>%
filter(grepl("Wiehle", nameCleaned)) %>%
select(Opened) %>%
unlist() %>%
as.Date(origin="numeric")
openings %>%
filter(grepl("Wiehle", nameCleaned)) %>%
select(Opened)
WIEHLE_OPENING<-openings %>%
filter(grepl("Wiehle", nameCleaned)) %>%
select(Opened) %>%
as.Date()
WIEHLE_OPENING<-openings %>%
filter(grepl("Wiehle", nameCleaned)) %>%
select(Opened)
WIEHLE_OPENING<-as.Data.Frame(openings %>%
filter(grepl("Wiehle", nameCleaned)))$Opened
WIEHLE_OPENING<-as.data.frame(openings %>%
filter(grepl("Wiehle", nameCleaned)))$Opened
View(joinedLines)
silver<-joinedLines %>% filter(LineCode == "SV")
nonSilver<-joinedLines %>% filter(LineCode != "SV")
View(silver)
silver<-joinedLines %>%
filter(LineCode == "SV") %>%
mutate(Opened=WIEHLE_OPENING)
View(silver)
joinedLines<-rbind(nonSilver, silver)
joinedLines<-joinedLines[order(joinedLines$LineCode, joinedLines$SeqNum),]
View(joinedLines)
runApp()
library(data.table)
library(dplyr)
setwd("C:/HY/Projects/Washington_Metro_leaflet")
# Assumes query_wmata_stations.py has been run, outputting a .CSV file
prep<-function(fn)  {
stopifnot(grepl("\\.csv$", fn))
dfFullStation<-read.csv(fn, header=TRUE, stringsAsFactors = FALSE)
colTypes<-sapply(seq(ncol(dfFullStation)),
function(k) typeof(dfFullStation[,k]))
idxList<-which(colTypes=="list")
dfFullStation[,idxList]<-gsub("NULL",as.character(NA),
sapply(idxList, function(k)
unlist(as.character(dfFullStation[,k]))))
blankToNA<-function(s)  {
ifelse(s=="", as.character(NA), s)
}
dfFullStation<-dfFullStation %>%
mutate(LineCode2=blankToNA(LineCode2),
LineCode3=blankToNA(LineCode3),
StationTogether1=blankToNA(StationTogether1),
StationTogether2=blankToNA(StationTogether2))
dfRmDups<-dfFullStation %>%
as.data.table() %>%
setkey(Code) %>%
unique(by="Code") %>%
as.data.frame()
dfRmDups<-dfRmDups %>%
mutate(isUpperLevel=ifelse(is.na(StationTogether1),
-1,
ifelse(LineCode1=="RD",
TRUE,
ifelse(grepl("Enfant", Name) &
LineCode1 %in% c("GR", "YL"),
TRUE,
FALSE)
) %>% as.integer()
))
return(dfRmDups)
}
dfRmDups<-prep("api_stations.csv")
lookupCode<-function(df, stName, levelCode=-1)  {
stopifnot(levelCode %in% seq(-1,1))
dfPossible<-df %>%
filter(grepl(stName, Name))
bIncorrect<-(levelCode < 0 & any(dfPossible$isUpperLevel >= 0)) |
(levelCode >= 0 & any(dfPossible$isUpperLevel < 0))
stopifnot(!bIncorrect)
res<-df %>%
filter(isUpperLevel == levelCode & grepl(stName, Name)) %>%
select(Code) %>%
unlist()
stopifnot(length(res)==1)
return(res)
}
CODE_NOMA<-dfRmDups %>%
lookupCode("NoMa")
INFILL_STATIONS<-c(CODE_NOMA,
"C11") # Potomac Yard (BL & YL--future);
TERMINUS<-"TERMINUS"
# referenced from https://docs.google.com/spreadsheets/d/13Kz-v3Yjn6ork9vXyl8KLSgzf7KYuGNP9d7HPMd-Kzc/pub?hl=en&single=true&gid=0&output=html
linesByTravelOrder<-read.csv("api_lines_in_travel_order.csv", header=TRUE)
cName<-function(s)  {
s<-Filter(function(x) !is.na(x), s)
s<-gsub("(\\*|\\[[a-z]\\])", "", s)
s<-gsub("\\s*\\(.+\\)", "", s)
s<-gsub("[^A-z\\s\\']", " ", s)
s<-gsub("Mount", "Mt", s)
return(s)
}
cleanName<-Vectorize(cName, vectorize.args = "s")
eFirst<-function(s) {
words<-s %>%
cName() %>%
strsplit(" ") %>%
unlist()
return(words[1] %>% trimws())
}
extractFirst<-Vectorize(eFirst, vectorize.args = "s")
processOpenings<-function(fn) {
stopifnot(grepl("\\.csv$", fn))
openings<-read.csv(fn, header=T, stringsAsFactors=F)
openings<-openings %>%
mutate(Station = as.character(Station)) %>%
mutate(nameCleaned = cleanName(Station),
Opened=as.Date(Opened, format="%B %d, %Y"),
boolUpperLevel=ifelse(grepl("level\\s*\\)", Station),
grepl("[Uu]p", Station),
as.logical(NA)))
openings<-openings[order(openings$nameCleaned,
openings$boolUpperLevel),]
return(openings)
}
augmentStation<-function(dfOpenings, dfStations)  {
dfStations<-dfStations[order(dfStations$Name,
dfStations$isUpperLevel),]
namesApi<-extractFirst(dfStations$Name)
namesDL<-extractFirst(dfOpenings$Station)
sum(namesApi != namesDL)
res<-cbind(dfStations, dfOpenings)
cleanCols<-function(df) {
df<-df %>%
select(-c(Station, boolUpperLevel, nameCleaned))
idxNonNA<-apply(df, MARGIN=2, FUN = function(x) any(!is.na(x)))
df<-df %>%
select(names(df)[idxNonNA])
return(df)
}
res<-cleanCols(res)
res<-res[order(res$Code),]
res<-res %>%
select(-c(LineCode1, LineCode2, LineCode3, queriedLine))
return(res)
}
trimStations<-function(stationsWithOpenings)  {
dfMultiLevel<-stationsWithOpenings %>%
filter(isUpperLevel >= 0) %>%
arrange(Name, isUpperLevel)
splitMulti<-split(dfMultiLevel, dfMultiLevel$Name)
consolidateDF<-function(elt)  {
helper<-function(k) {
colName<-names(dfMultiLevel)[k]
if(colName %in% c("Lat", "Lon", "Name", "isUpperLevel",
"Lines", "Opened")) {
if(colName %in% c("Lat", "Lon"))
return(unique(elt[,k]))
else if(colName == "Name")  {
return(unique(elt$Name))
}
else if(colName == "isUpperLevel")
return(-1)
else if(colName == "Lines") {
res<-paste("Upper level: ", elt$Lines[2], "<br/>",
"Lower level: ", elt$Lines[1],
sep="")
return(res)
}
else
return(min(elt$Opened))
}
else
return(NA)
}
partialResults<-lapply(seq(ncol(dfMultiLevel)),
helper)
names(partialResults)<-names(dfMultiLevel)
return(partialResults %>% as.data.frame)
}
dfMultiLevel<-do.call(rbind,
lapply(splitMulti, consolidateDF))
dfSingleLevel<-stationsWithOpenings %>%
filter(isUpperLevel < 0)
res<-rbind(dfSingleLevel,
dfMultiLevel)
row.names(res)<-NULL
return(res)
}
augmentLines<-function(stationsWithOpenings, dfLines) {
res<-left_join(dfLines, stationsWithOpenings, by=c("StationCode"="Code"))
res<-res[order(res$LineCode,res$SeqNum),]
return(res)
}
openings<-processOpenings("Station opening time list.csv")
dfStations1<-augmentStation(openings, dfRmDups)
trimmedStations<-trimStations(dfStations1)
joinedLines<-augmentLines(dfStations1, linesByTravelOrder)
# alter Silver Line to 2014 opening
WIEHLE_OPENING<-as.data.frame(openings %>%
filter(grepl("Wiehle", nameCleaned)))$Opened
silver<-joinedLines %>%
filter(LineCode == "SV") %>%
mutate(Opened=WIEHLE_OPENING)
nonSilver<-joinedLines %>% filter(LineCode != "SV")
joinedLines<-rbind(nonSilver, silver)
joinedLines<-joinedLines[order(joinedLines$LineCode, joinedLines$SeqNum),]
write.csv(trimmedStations, "concise_stations.csv", row.names = FALSE)
write.csv(joinedLines, "stations_line_travel_order.csv", row.names = FALSE)
runApp()
setwd("C:/HY/Projects/Washington_Metro_leaflet")
dfConcise<-read.csv("Concise_stations.csv", stringsAsFactors = FALSE)
dfConcise<-dfConcise %>% mutate(Opened = as.Date(Opened))
min(dfConcise$Opened)
getYear(min(dfConcise$Opened))
type(dfConcise$Opened)
typeof(dfConcise$Opened)
min(dfConcise$Opened)$year
as.Pmin(dfConcise$Opened)$year
as.POSIXct(min(dfConcise$Opened))$year
as.POSIXct(min(dfConcise$Opened))
as.POSIXlt(min(dfConcise$Opened))
as.POSIXlt(min(dfConcise$Opened))$year
SYS_OPEN<-min(dfConcise$Opened)
LAST_EXP<-max(dfConcise$Opened)
as.character(SYS_OPEN)
?year
format(SYS_OPEN,"%Y")
as.Date(format(SYS_OPEN,"%Y"))
paste(format(SYS_OPEN,"%Y"),"-01-01",sep="")
as.Date(paste(format(SYS_OPEN,"%Y"),"-01-01",sep=""))
runApp()
runApp()
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd("C:/HY/Projects/Washington_Metro_leaflet/Shiny_presentation")
slidify("index.Rmd")
